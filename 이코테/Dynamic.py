#다이나믹 프로그래밍
#대표적인 예는 피보나치 수열 -> 점화식 -> 재귀함수 사용
def fibo(x):
    if x==1 or x==2:
        return 1
    return fibo(x-1)+fibo(x-2)
print(fibo(4))
#문제점 -> 중복호출 -> n이 커질수록 반복해서 호출해야하는 수가 많아짐 -> 다이나믹 프로그래밍 사용

#조건
#1. 큰 문제가 작은 문제로 나눌수 있다. / 2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

#구현방법
#1.(탑다운)메모이제이션 기법 - 한번 구한 결과를 메모리 공간에 메모해두고 같은 식 호출시 결과 가져오기 -> 값 저장 방법 : 캐싱 / 한번 구한 정보는 리스트에 저장, 재귀적 수행
#한번 계산된 결과를 메모이제이션하기 위한 리스트 초기화
d=[0]*100
def fibo2(x):
    if x==1 or x==2:
        return 1
    if d[x]!=0:
        return d[x]
    d[x]=fibo2(x-1)+fibo2(x-2)
    return d[x]
print(fibo2(99))

#보텀업 방식
def fibo3(x):
    d2=[0]*100 #결과 저장용 리스트 : DP테이블
    d[1]=1
    d[2]=1
    n=99
    for i in range(3,n+1):
        d[i]=d[i-1]+d[i-2]
print(fibo3(99))